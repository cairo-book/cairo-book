[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Based on the provided code blocks, Which of the following functions will NOT cause a runtime panic?

```
fn main() {
    if true {
        panic!("2");
    }
    println!("This line isn't reached");
}
```
```
fn main() {
    let arr = array![1, 2, 3];
    let index = 5;

    let value = arr[index];

    println!("Value at index {}: {}", index, value);
}
```
```
use core::array::ArrayTrait;
fn main(){
    let mut arr = ArrayTrait::<u128>::new();
    arr.append(5);
    let index_to_access = 0; 
    match arr.get(index_to_access) {
        Option::Some(x) => {
           *x.unbox();
        },
        Option::None => { panic!("out of bounds") }
    }
}
```
"""
answer.answer = "`Code Block 3`"
prompt.distractors = [
  "`Code Block 1`",
  "`Code Block 2`",
  "`Code Block 2 and Code Block 3`",
  "`Code Block 3`",
]
context = """
Code block 3 initializes an array with five elements and accesses the element at index 0, which is within bounds. This means the code will compile and run without causing any panics.
"""

[[questions]]
type = "Tracing"
prompt.program = """
Will this program compiles when you run it? if yes what will be the output.

fn main() nopanic {
    println!("Hello, World!");
}

"""

answer.doesCompile = false

context = """
Cairo's compiler detects potential panics in functions declared as nopanic when they call functions that may panic, ensuring robust error handling.
"""

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
What is the purpose of the `panic_with` attribute?

"""
answer.answer = "To create a wrapper function that panics if the result is `None` or `Err`"
prompt.distractors = [
  "You can use the `#[panic_with]` notation to indicate that a function will never panic",
  "To create a wrapper function that panics if the result is `None` or `Err`",
  "To catch errors and provide a resolution",
]
context = """
If your function is marked with `#[panic_with]` and returns `Result::Err` or `Option::None`, it will cause a runtime panic.
"""