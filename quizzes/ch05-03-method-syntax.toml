[[questions]]
type = "Tracing"
prompt.program = """
#[derive(Copy, Drop)]
struct Rectangle {
    width: u64,
    height: u64,
}
#[generate_trait]
impl RectangleImpl of RectangleTrait {
    fn area(self: @Rectangle) -> u64 {
        (*self.width) * (*self.height)
    }
    fn new(self: @Rectangle, width: u64, height: u64) -> Rectangle {
        Rectangle { width, height }
    }
    fn compare(self: Rectangle, r2: @Rectangle) -> bool {
        let r1_area = self.area();
        let r2_area = r2.area();

        return r1_area == r2_area;
    }
}

fn main() {
    let rect1 = Rectangle {width: 40, height: 50};
    let rect2 = rect1.new(10, 20);
    rect1.compare(@rect2);
}
"""

answer.doesCompile = true
answer.stdout = false
context = """
Methods with the self parameter can be called by any object of the specified type.
"""



[[questions]]
type = "Tracing"
prompt.program = """
trait SquareTrait {
    fn area(self: @Rectangle) -> u64;
}
impl SquareImpl of SquareTrait {
    fn area(self: @Rectangle) -> u64 {
        return (*self.width) * (*self.height);
    }
}

#[derive(Drop)]
struct Square {
    width: u64,
    height: u64,
  }
fn main() {
    let my_square = Square { width: 30, height: 50 };
    let area = my_square.area();
    assert!(area == 1500);
}
"""
answer.doesCompile = false
context = """
The SquareTrait trait is defined expecting a parameter of type Rectangle thus passing a Square struct as input will throw an error.
"""
