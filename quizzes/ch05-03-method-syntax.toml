[[questions]]
type = "MultipleChoice"
prompt.prompt = "How are method called on an instance?"
prompt.distractors = [
"instance:method()",
"method(instance)",
"method@instance()"
]

answer.answer = "instance.method()"
context = """
methods are called on an instance using the <instance_name>.<method_name> syntax. 
"""

[[questions]]
type = "MultipleChoice"
prompt.prompt = "Which of the following is a correct method definition?"
prompt.distractors = [
"fn area() -> u64",
"fn area(rectangle:Rectangle) -> u64",
"let area(rectangle) -> u64"
]

answer.answer = "fn area(self: @Rectangle) -> u64"
context = """
Method definitions in Cairo follow a specific syntax.
"""

[[questions]]
type = "Tracing"
prompt.program = """
trait SquareTrait {
    fn area(@Square) -> u64;
}
impl SquareImpl of SquareTrait {
    fn area(@Square) -> u64 {
        return (*self.width) * (*self.height);
    }
}
struct Square {
    width: u64,
    height: u64,
  }
fn main() {
    let my_square = Square { width: 30, height: 50 };
    let area = my_square.area();
    assert!(area == 1500);
}
"""
answer.doesCompile = false
context = """
This is a compiler error because of line 33 and 36, When defining a method within a trait the `self:` parameter represents the instance the method is called on.
"""